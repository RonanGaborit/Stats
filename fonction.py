import pandas as pd
from ressources.reader_csv import load_data
import numpy as np


def visualisation_donnees_manquantes(dataframe):
    """
    Affiche les colonnes avec des donn√©es manquantes et leur pourcentage dans la DataFrame.
    - Supprime automatiquement les colonnes ayant 50% ou plus de valeurs manquantes.

    Arguments :
    dataframe : pd.DataFrame : La DataFrame √† analyser.

    Retourne :
    Une DataFrame mise √† jour apr√®s la suppression des colonnes avec trop de valeurs manquantes.
    """
    # Collecte des colonnes qui contiennent des valeurs manquantes
    col_with_na = dataframe.columns[dataframe.isna().any()].tolist()

    # Calcul des statistiques de valeurs manquantes (nombre et pourcentage)
    stats = [
        (col, dataframe[col].isna().sum(), round(dataframe[col].isna().sum() / len(dataframe) * 100, 2))
        for col in col_with_na
    ]

    # Affichage des statistiques des colonnes avec des valeurs manquantes
    if stats:
        for col, nb_na, perc_na in stats:
            if perc_na <= 50.0:
                print(f"üîπ **Colonne:** {col} | **Donn√©es manquantes:** {nb_na} | **Pourcentage:** {perc_na}%")

        # Identification des colonnes ayant 50% ou plus de valeurs manquantes
        cols_to_drop = [col for col, _, perc_na in stats if perc_na >= 50]

        # Suppression automatique des colonnes identifi√©es
        if cols_to_drop:
            dataframe = dataframe.drop(columns=cols_to_drop)

    return dataframe


def processing():
    """
    Effectue le pr√©-traitement des donn√©es :
    - Chargement des donn√©es
    - Suppression des colonnes inutiles
    - Remplacement de certaines valeurs par NaN

    Retourne :
    DataFrame pr√©-trait√©e
    """
    data = load_data()  # Chargement des donn√©es (fonction suppos√©e d√©finie ailleurs)
    pd.options.mode.chained_assignment = None  # D√©sactivation des avertissements li√©s aux copies de DataFrame

    # Affichage des informations de la DataFrame avant traitement
    print("DataFrame Initiale".center(50, "="))
    data.info()
    print()
    print("Taux de valeurs manquantes".center(50, "="))

    # Suppression des colonnes avec plus de 50% de valeurs manquantes
    new_data = visualisation_donnees_manquantes(data)

    # Liste des colonnes sp√©cifiques √† supprimer (jug√©es non pertinentes)
    colonnes_a_supprimer = [
        "Dipl√¥me", "Disciplines", "Salaire net mensuel m√©dian national",
        "Salaire net mensuel m√©dian des emplois √† temps plein", "Discipline",
        "Secteur disciplinaire", "Code du domaine", "Secteur disciplinaire",
        "Code du secteur disciplinaire", "Code du secteur disciplinaire SISE",
        "Nombre de r√©ponses", "Part des emplois de niveau cadre ou profession interm√©diaire",
        "% emplois ext√©rieurs √† la r√©gion de l‚Äôuniversit√©", "Code de la discipline",
        "Premier quartile des salaires nets mensuels des emplois √† temps plein",
        "Dernier quartile des salaires nets mensuels des emplois √† temps plein", "cle_DISC",
        "Salaire net mensuel national 1er quartile", "Salaire net mensuel national 3√®me quartile",
    ]

    # Suppression des colonnes sp√©cifi√©es
    new_data = new_data.drop(columns=colonnes_a_supprimer)

    # Remplacement des valeurs "nd" et "ns" par NaN
    new_data.replace(["nd", "ns"], np.nan, inplace=True)

    return new_data


def supprimer_replace_nan(dataframe):
    """
    Effectue des conversions de types et supprime les valeurs manquantes.
    - Convertit certaines colonnes en nombres flottants.
    - Convertit certaines colonnes en cha√Ænes de caract√®res.
    - Supprime les lignes contenant des valeurs manquantes.

    Arguments :
    dataframe : pd.DataFrame : La DataFrame √† traiter.

    Retourne :
    DataFrame nettoy√©e sans valeurs manquantes.
    """
    # Liste des colonnes √† convertir en type float (num√©rique)
    list_colonne_conv_float = [
        "Taux d‚Äôinsertion", "Part des emplois de niveau cadre",
        "Part des emplois √† temps plein", "Salaire brut annuel estim√©",
        "Part des dipl√¥m√©s boursiers dans la discipline", "Part des emplois stables"
    ]

    # Liste des colonnes √† convertir en type string (texte)
    list_colonne_conv_str = ["Ann√©e", "situation", "Genre", "Domaine"]

    # Conversion des colonnes num√©riques
    for colonne in list_colonne_conv_float:
        if colonne in dataframe.columns:
            dataframe[colonne] = pd.to_numeric(dataframe[colonne], errors="coerce")

    # Conversion des colonnes textuelles
    for colonne in list_colonne_conv_str:
        if colonne in dataframe.columns:
            dataframe[colonne] = dataframe[colonne].astype(str)

    # Suppression des lignes contenant des valeurs manquantes
    dataframe = dataframe.dropna()

    return dataframe
